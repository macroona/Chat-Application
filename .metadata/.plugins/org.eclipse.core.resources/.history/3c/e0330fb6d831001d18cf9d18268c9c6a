
import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.TrayIcon.MessageType;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.*;
import java.net.*;

import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

public class Client extends JFrame {
	Socket client;
	BufferedReader br;
	PrintWriter out;
	//Declare Components
	private JLabel heading = new JLabel("Client Area");
	private JTextArea messagearea = new JTextArea();
	private JTextField messageInput = new JTextField();
	private Font font = new Font("Roboto",Font.PLAIN,20);
	
	Client()
	{
		
		try {
			
			  System.out.println("Sendong request to server"); client = new
			  Socket("127.0.0.1",7777); 
			  System.out.println("Connection done");
			  
			  //to read data from client i.e socket
			  br = new BufferedReader(new InputStreamReader(client.getInputStream()));
			  //to write data and send to client since stream is uni directional. 
			  out = new PrintWriter(client.getOutputStream());
			 
			createGUI();
			handleEvents();
			
			  StartReading(); 
			 // StartWriting();
			 
			
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	private void handleEvents() {
		messageInput.addKeyListener(new KeyListener() {
			
			@Override
			public void keyTyped(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void keyReleased(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void keyPressed(KeyEvent e) {
				// TODO Auto-generated method stub
				//System.out.println("Key Released"+e.getKeyCode());
				if(e.getKeyCode()==10)
				{
					String messagetosend = messageInput.getText();
					messagearea.append("Me:"+messagetosend+"\n");
					out.println(messagetosend);
					out.flush();
					messageInput.setText(" ");
					messageInput.requestFocus();
				}
				
			}
		});
		
	}

	private void createGUI()
	{
		this.setTitle("Client Messenger[END]");
		this.setSize(600,700);
		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//coding for component
		heading.setFont(font);
		messagearea.setFont(font);
		messageInput.setFont(font);
		heading.setHorizontalAlignment(SwingConstants.CENTER);
		heading.setBorder(BorderFactory.createEmptyBorder(20,20,20,20));
		//setting frame layout
		this.setLayout(new BorderLayout());
		//adding the components to frame
		this.add(heading,BorderLayout.NORTH);
		this.add(messagearea,BorderLayout.CENTER);
		this.add(messageInput,BorderLayout.SOUTH);
		
		
		
		
		
		this.setVisible(true);
	}
	
	
	public void StartReading()
	{
		// to read data simulatenously
		Runnable r1 = ()->{
			System.out.println("Reader started...");
			try {
			while(true)
			{
			
				
					String msg = br.readLine();
				
				if(msg.equals("exit"))
				{
					System.out.println("Server Terminated the chat");
					JOptionPane.showMessageDialog(this, "Server Terminate the chat");
					messageInput.setEnabled(false);
					client.close();
					break;
				}
				//System.out.println("Server:"+msg);
				messagearea.append("Server:"+msg+":\n");
				
			}
			}catch (Exception e) {
				// TODO: handle exception
				//e.printStackTrace();
				System.out.println("Connection is closed");
			}
		};
		new Thread(r1).start();
		
	}
	

	public void StartWriting()
	{
		Runnable r2 = ()->
		{
			System.out.println("Write started");
			try {
			while(!client.isClosed())
			{
				
					BufferedReader br1 = new BufferedReader(new InputStreamReader(System.in));
					String content = br1.readLine();
					
					out.println(content);
					out.flush();
					
					if(content.equals("exit"))
					{
						client.close();
						break;
					}
				
			}
			//System.out.println("Connection is closed");
			}catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
		};
		new Thread(r2).start();
	}
	
	public static void main(String[] args)
	{
		System.out.println("This is client.....");
		new Client();
	}

}
